Right [("SearchResponse/Result.hs","{-# LANGUAGE DeriveGeneric   #-}\n{-# LANGUAGE RecordWildCards #-}\nmodule SearchResponse.Result(module Data.Protobuf, module SearchResponse.Result) where\n\nimport Data.Protobuf\nimport Data.Protobuf.Encoding\nimport qualified Data.IntMap as IntMap\nimport GHC.Generics(Generic)\n\ndata Result = Result\n  { url :: !Text\n  , title :: !Text\n  , snippets :: ![Text]\n  } deriving (Show, Generic)\n\ninstance ProtoMessage SearchResponse.Result.Result where\n  fromProto raw =\n    SearchResponse.Result.Result\n      <$> raw .: 1\n      <*> raw .: 2\n      <*> raw .: 3\n  toProto SearchResponse.Result.Result{..} = RawMessage\n    $ IntMap.empty\n      & IntMap.insert 1 [toRawValue url]\n      & IntMap.insert 2 [toRawValue title]\n      & IntMap.insert 3 [toRawValue snippets]\n\ninstance AsRawValue SearchResponse.Result.Result where\n  defaultValue =\n    SearchResponse.Result.Result\n      defaultValue\n      defaultValue\n      defaultValue\n  rawType = RTLengthEncoded\n  toRawValue msg = RLengthEncoded . runPut $ putRawMessage (toProto msg)\n  fromRawValue (RLengthEncoded raw) = case runGet getRawMessage raw of\n    Right rawMessage -> fromProto rawMessage\n    Left err         -> Failure err\n  fromRawValue _ = rawTypeFailure\n\n"),("SearchResponse.hs","{-# LANGUAGE DeriveGeneric   #-}\n{-# LANGUAGE RecordWildCards #-}\nmodule SearchResponse(module Data.Protobuf, module SearchResponse) where\n\nimport Data.Protobuf\nimport Data.Protobuf.Encoding\nimport qualified Data.IntMap as IntMap\nimport GHC.Generics(Generic)\nimport SearchResponse.Result\n\ndata SearchResponse = SearchResponse\n  { results :: ![.SearchResponse.Result.Result]\n  } deriving (Show, Generic)\n\ninstance ProtoMessage SearchResponse.SearchResponse where\n  fromProto raw =\n    SearchResponse.SearchResponse\n      <$> raw .: 1\n  toProto SearchResponse.SearchResponse{..} = RawMessage\n    $ IntMap.empty\n      & IntMap.insert 1 [toRawValue results]\n\ninstance AsRawValue SearchResponse.SearchResponse where\n  defaultValue =\n    SearchResponse.SearchResponse\n      defaultValue\n  rawType = RTLengthEncoded\n  toRawValue msg = RLengthEncoded . runPut $ putRawMessage (toProto msg)\n  fromRawValue (RLengthEncoded raw) = case runGet getRawMessage raw of\n    Right rawMessage -> fromProto rawMessage\n    Left err         -> Failure err\n  fromRawValue _ = rawTypeFailure\n\n")]