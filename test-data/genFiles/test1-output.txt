Right [("SearchRequest.hs","{-# LANGUAGE DeriveGeneric   #-}\n{-# LANGUAGE RecordWildCards #-}\nmodule SearchRequest(module Data.Protobuf, module SearchRequest) where\n\nimport Data.Protobuf\nimport Data.Protobuf.Encoding\nimport qualified Data.IntMap as IntMap\nimport GHC.Generics(Generic)\n\ndata SearchRequest = SearchRequest\n  { query :: Text\n  , page_number :: Int32\n  , result_per_page :: Int32\n  } deriving (Show, Generic)\n\ninstance ProtoMessage SearchRequest.SearchRequest where\n  fromProto raw =\n    SearchRequest.SearchRequest\n      <$> raw .: 1\n      <*> raw .: 2\n      <*> raw .: 3\n  toProto SearchRequest.SearchRequest{..} = RawMessage\n    $ IntMap.empty\n      & IntMap.insert 1 [toRawValue query]\n      & IntMap.insert 2 [toRawValue page_number]\n      & IntMap.insert 3 [toRawValue result_per_page]\n\ninstance AsRawValue SearchRequest.SearchRequest where\n  defaultValue =\n    SearchRequest.SearchRequest\n      defaultValue\n      defaultValue\n      defaultValue\n  rawType = RTLengthEncoded\n  toRawValue msg = RLengthEncoded . runPut $ putRawMessage (toProto msg)\n  fromRawValue (RLengthEncoded raw) = case runGet getRawMessage raw of\n    Right rawMessage -> fromProto rawMessage\n    Left err         -> Failure err\n  fromRawValue _ = rawTypeFailure\n\n")]